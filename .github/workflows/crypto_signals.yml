name: Crypto Signals Processing

on:
  schedule:
    - cron: '*/3 * * * *'  # Run every 3 minutes
  workflow_dispatch:  # Allow manual triggering

jobs:
  process-signals:
    runs-on: ubuntu-22.04  # Updated from ubuntu-24.04
    permissions:
      contents: write
      issues: write

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            python3-dev \
            git

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          if [ $? -ne 0 ]; then
            echo "Failed to install dependencies"
            exit 1
          fi

      # Make secrets available as environment variables
      - name: Setup environment
        env:
          CG_API_KEY_1: ${{ secrets.CG_API_KEY_1 }}
          CG_API_KEY_2: ${{ secrets.CG_API_KEY_2 }}
          CG_API_KEY_3: ${{ secrets.CG_API_KEY_3 }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Verify secrets
          for secret in CG_API_KEY_1 CG_API_KEY_2 CG_API_KEY_3 TELEGRAM_BOT_TOKEN TELEGRAM_CHAT_ID; do
            # Indirect expansion: ${!secret} refers to env var with name=$secret
            if [ -z "${!secret}" ]; then
              echo "Error: $secret is not set"
              exit 1
            fi
          done

          # Create directories with proper permissions
          mkdir -p saved_data historical_data logs
          chmod -R 777 saved_data historical_data logs

          # Create .env file
          cat > .env << EOL
CG_API_KEY_1=${CG_API_KEY_1}
CG_API_KEY_2=${CG_API_KEY_2}
CG_API_KEY_3=${CG_API_KEY_3}
TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
RUNNING_IN_DOCKER=true
EOL

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run container
        run: |
          DOCKER_BUILDKIT=1 docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            -t crypto-signals .

          docker run --rm \
            -v ${{ github.workspace }}/saved_data:/app/saved_data \
            -v ${{ github.workspace }}/historical_data:/app/historical_data \
            -v ${{ github.workspace }}/logs:/app/logs \
            --env-file .env \
            crypto-signals

      - name: Commit changes
        run: |
          if [ -n "$(git status --porcelain saved_data historical_data logs)" ]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add saved_data historical_data logs
            git commit -m "Auto update data files [skip ci]"
            git push || {
              echo "Failed to push changes"
              exit 1
            }
          else
            echo "No changes to commit"
          fi

      - name: Notify on failure
        if: failure()
        run: |
          ERROR_MESSAGE="❌ Crypto Signals workflow failed!

          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          Run: #${{ github.run_number }}
          Commit: ${{ github.sha }}

          Error Details: Check https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${{ secrets.TELEGRAM_CHAT_ID }}\",\"text\":\"$ERROR_MESSAGE\",\"parse_mode\":\"Markdown\"}"
